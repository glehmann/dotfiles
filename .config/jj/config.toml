"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Gaëtan Lehmann"
email = "gaetan.lehmann@gmail.com"

[git]

[ui]
default-command = ["log", "-T", "zenst"]
conflict-marker-style = "git"
diff-editor = ":builtin"

[colors]
"diff token" = { underline = false }
"diff removed token" = { bg = "#221313" }
"diff added token" = { bg = "#222922" }

[squash]
co-authors = true

[templates]
log = "builtin_log_compact_full_description"
# log = "builtin_log_comfortable"
log_node = '''
coalesce(
  if(!self, label("elided", "~")),
  label(
    separate(" ",
      if(current_working_copy, "working_copy"),
      if(immutable, "immutable"),
      if(conflict, "conflict"),
    ),
    coalesce(
      if(current_working_copy, "@"),
      if(immutable, "♦"),
      if(conflict, "×"),
      "○",
    )
  )
)
'''
git_push_bookmark = '"glehmann/" ++ change_id.short()'

[signing]
behavior = "own"
backend = "ssh"
key = "~/.ssh/id_ed25519.pub"

[aliases]
annotate = ["file", "annotate"]
ci = ["commit"]
clone = ["git", "clone", "--colocate"]
init = ["git", "init", "--colocate"]
push = ["git", "push"]
retrunk = ["rebase", "-d", "trunk()"]
nt = ["new", "trunk()"]
fetch = ["git", "fetch", "--all-remotes"]
remote = ["git", "remote"]
tp = ["util", "exec", "--", "bash", "-c", "jj tug && jj push"]
track = ["util", "exec", "--", "bash", "-c", "jj bookmark track $1@origin && jj new $1", ""]
streamline = ["simplify-parents"]
clean = ["util", "exec", "--", "git", "clean", "-e", ".jj", "-nx", ":/"]
cat = ["file", "show"]
drop = ["abandon"]

tug = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj bookmark move --from "closest_bookmark(@)" --to "closest_pushable(@)"
else
  jj bookmark move --from "closest_bookmark($1)" --to "$1"
fi
""", ""]

up = ["util", "exec", "--", "bash", "-c", """
#!/usr/bin/env bash
set -euo pipefail
bookmark=`jj log -r 'heads(::@ & tracked_remote_bookmarks())' -T bookmarks --no-graph`
jj git fetch --all-remotes
jj rebase -d $bookmark
""", ""]

generate-bookmark-name = ["util", "exec", "--", "bash", "-c", """
#!/bin/bash
set -e
rev="closest_pushable(@)"
if [ -n "$1" ]; then
	rev=$1
fi
cat <<EOF > /tmp/jj-bookmark-prompt
Generate a short branch name for these commits.
Only produce one branch name without explanation.
Use - as separator.
Don't include any / character in the branch name.
Never include WIP or feat in the branch name.

EOF
jj log -r "closest_bookmark($rev-)..$rev" --no-graph -T description -s >> /tmp/jj-bookmark-prompt
bookmark=gln/`cat /tmp/jj-bookmark-prompt | gemini-cli prompt --model gemini-2.0-flash -`
change_id=`jj log -T 'change_id.short(4)' --no-graph -r $rev`
echo $bookmark-$change_id
""", ""]
# create and push bookmark

cpb = ["util", "exec", "--", "bash", "-c", """
#!/bin/bash
set -e
rev="closest_pushable(@)"
if [ -n "$1" ]; then
	rev=$1
fi
bookmark=`jj generate-bookmark-name $rev`
jj bookmark set -r $rev $bookmark
jj push -b $bookmark --allow-new
""", ""]

[revset-aliases]
branch = "trunk()..@"
br = "branch"
'closest_bookmark(to)' = 'heads(::to & bookmarks())'
'closest_pushable(to)' = 'heads(::to & ~description(exact:"") & (~empty() | merges()))'

[template-aliases]
detailed = "builtin_log_detailed"
ol = "builtin_log_oneline"
zenst = '''
if(root,
separate(" ",
  format_short_change_id(self.change_id()),
    label("root", "root()"),
    self.bookmarks(),
  ) ++ "\n",
  label(if(current_working_copy, "working_copy"),
    separate(" ",
      coalesce(
        if(self.hidden(), label("hidden", format_short_commit_id(self.commit_id()) ++ " (hidden)")),
        if(self.immutable(), format_short_commit_id(self.commit_id())),
        if(self.divergent(), label("divergent", self.change_id().shortest(8)) ++ "/" ++ self.commit_id().shortest()),
        format_short_change_id(self.change_id()),
      ),
      bookmarks,
      tags,
      working_copies,
      if(conflict, label("conflict", "conflict")),
      if(config("ui.show-cryptographic-signatures").as_boolean(),
        format_short_cryptographic_signature(signature)),
      if(empty, label("empty", "(empty)")),
      if(description,
        description.first_line(),
        label(if(empty, "empty"), description_placeholder),
      ),
    )
    ++ "\n"
    ++ if((current_working_copy || !description) && !empty, diff.summary() ++ "\n")
  )
)
'''
zen = '''
if(root,
separate(" ",
  format_short_change_id(self.change_id()),
    label("root", "root()"),
    self.bookmarks(),
  ) ++ "\n",
  label(if(current_working_copy, "working_copy"),
    separate(" ",
      coalesce(
        if(self.hidden(), label("hidden", format_short_commit_id(self.commit_id()) ++ " (hidden)")),
        if(self.immutable(), format_short_commit_id(self.commit_id())),
        if(self.divergent(), label("divergent", self.change_id().shortest(8)) ++ "/" ++ self.commit_id().shortest()),
        format_short_change_id(self.change_id()),
      ),
      bookmarks,
      tags,
      working_copies,
      if(conflict, label("conflict", "conflict")),
      if(config("ui.show-cryptographic-signatures").as_boolean(),
        format_short_cryptographic_signature(signature)),
      if(empty, label("empty", "(empty)")),
      if(description,
        description.first_line(),
        label(if(empty, "empty"), description_placeholder),
      ),
    ) ++ "\n",
  )
)
'''
prompt = '''
separate(" ",
  label(
    separate(" ",
      if(current_working_copy, "working_copy"),
      if(immutable, "immutable"),
      if(conflict, "conflict"),
      if(divergent, "divergent"),
      if(hidden, "hidden"),
    ),
    if(divergent, "??", if(conflict, "×", "@")),
  ),
  if(empty,
    label("empty",
      concat(
        "(∅",
        if(!description, ",Đ"),
        ")",
      ),
    ),
  ),
  if(description,
    truncate_end(13, description.first_line(), "…"),
    label("description placeholder", if(!empty, "(Đ)")),
  ),
) ++ " "
'''

# override user.email if the repository is located under ~/src/vates
[[--scope]]
--when.repositories = ["~/src/vates", "~/src/xcp-ng", "~/src/xcp-ng-rpms"]
[--scope.user]
email = "gaetan.lehmann@vates.tech"
[--scope.templates]
commit_trailers = "format_signed_off_by_trailer(self)"
